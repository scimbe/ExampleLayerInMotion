name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    # Checkout-Schritt: Code auschecken
    - name: Code auschecken
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Wichtig für SonarQube-Analyse
    
    # Java und Maven Setup
    - name: Java Setup
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'
    
    # Maven Dependencies herunterladen
    - name: Maven Dependencies herunterladen
      run: mvn dependency:resolve
    
    # Projekt kompilieren
    - name: Projekt kompilieren
      run: mvn clean compile
    
    # JUnit-Tests ausführen
    - name: JUnit-Tests ausführen
      run: mvn test
    
    # JaCoCo-Testabdeckung generieren
    - name: JaCoCo-Testabdeckung generieren
      run: mvn jacoco:report
    
    # SonarQube-Analyse
    - name: SonarQube-Analyse
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: >
        mvn sonar:sonar 
        -Dsonar.projectKey=ExampleLayerInMotion 
        -Dsonar.organization=scimbe 
        -Dsonar.host.url=https://sonarcloud.io 
        -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
    
    # Docker-Image bauen
    - name: Docker-Image bauen
      run: docker build -t motion-system .
    
    # Optional: Docker-Image in Registry pushen (wenn konfiguriert)
    # - name: Docker-Image pushen
    #   run: |
    #     echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
    #     docker push motion-system:latest
